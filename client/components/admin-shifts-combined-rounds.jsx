import React from 'react';
import AdminShiftsHoverDetailsAndLabels from './admin-shifts-hover-details-and-labels';
import { convertMilitaryTime } from '../lib/time-functions';
import './admin-shifts-display.css';

const colors = ['hsl(218.0243189356372,56.173763967761815%,35.59837864354188%)', 'hsl(256.8580341599328,77.31598003982772%,34.607006869615184%)', 'hsl(42.457956572059246,64.09148982078659%,36.45762351489024%)', 'hsl(58.34595516988472,56.91886981455094%,38.23570218292514%)', 'hsl(263.4001691395977,93.56254150984873%,33.80157989137811%)', 'hsl(185.58441633111372,70.84060408879985%,32.700746538784365%)', 'hsl(172.51661666072812,92.83134036859279%,35.65705665737508%)', 'hsl(49.379520306495266,49.770692663300295%,32.384305522391884%)', 'hsl(78.83225568461974,56.81247210200283%,39.68815283506136%)', 'hsl(22.2337933785559,53.539009070955444%,31.43948590993364%)', 'hsl(89.29517685048495,55.59927749554993%,39.20929276985399%)', 'hsl(322.34590377999973,58.37182000812537%,35.43206453738149%)', 'hsl(178.29820866184372,41.66844547474311%,36.57744993557291%)', 'hsl(283.2326230422783,48.850288692161%,33.85000813345782%)', 'hsl(25.195129151596092,28.40812554620677%,38.90883913383371%)', 'hsl(102.1227517473524,65.59681697213728%,35.252299698482354%)', 'hsl(126.56964410322281,70.18051055453348%,35.4418164268505%)', 'hsl(284.40113036979477,84.07206716636028%,38.5409090721824%)', 'hsl(290.05568901433537,52.20235309019826%,30.647359694743095%)', 'hsl(126.75781823763408,39.57024703228352%,39.046101275831234%)', 'hsl(299.9160674522326,79.65058325590942%,34.777111273595736%)', 'hsl(129.7605482259001,36.458615207520104%,35.87560761842334%)', 'hsl(248.82843145972436,41.936244702815756%,33.124148571406295%)', 'hsl(338.84817318902543,79.50236114745275%,33.5007815148871%)', 'hsl(226.68476992597596,87.9179295714955%,32.03372295626758%)', 'hsl(286.6085063297256,48.32358708874007%,31.503524363368328%)', 'hsl(165.8302699934432,60.94721642983195%,34.53557314236458%)', 'hsl(277.9666222943012,57.11786468737712%,38.682065482292714%)', 'hsl(308.1899758768722,45.063371783824834%,31.574156915859998%)', 'hsl(115.87162697757137,26.658919698379137%,31.188710130769792%)', 'hsl(252.4743893030815,50.52605135207371%,36.45644576245917%)', 'hsl(89.51396220292914,78.30255769952913%,38.815543748767396%)', 'hsl(280.19534877209696,38.87696992094735%,30.661163264968213%)', 'hsl(215.6009576236682,39.38914541259226%,36.136584533314256%)', 'hsl(337.3673755511056,69.18299351761966%,36.45160314322544%)', 'hsl(215.93817122075322,78.24033722057189%,36.40619515227969%)', 'hsl(325.5819924535118,32.21148267799292%,33.72106157902691%)', 'hsl(121.77776641326382,35.28452419625286%,36.63532717702322%)', 'hsl(63.57470253348474,78.895428342511%,31.700292584738715%)', 'hsl(161.76771640255873,25.36534012350119%,37.82095994820828%)', 'hsl(38.50489730761815,93.50470739947353%,39.00188573736882%)', 'hsl(29.09992627971647,67.98317619099822%,32.22459391936223%)', 'hsl(187.2823381529907,88.45853964058162%,38.27640502773358%)', 'hsl(192.8216436053105,53.80501668356229%,35.895659280730605%)', 'hsl(95.05091723043037,38.610755493436095%,38.53402834247788%)', 'hsl(205.1850318325467,55.340648761992995%,39.24915681635127%)', 'hsl(139.92652382831906,58.8842183260005%,33.664067358903%)', 'hsl(78.78910201578591,77.61053906042466%,31.140911515578512%)', 'hsl(339.48792022020007,77.87430046077529%,38.17596785504666%)', 'hsl(37.49119250937291,50.023758050114736%,31.66918335844037%)', 'hsl(102.5656204237498,59.78333192220907%,35.78556139553325%)', 'hsl(242.18343177241076,70.35502256564988%,38.09476835348193%)', 'hsl(237.9797656118182,36.31386277097811%,34.25804366364653%)', 'hsl(181.01672242498552,49.33830493035002%,38.57225180897317%)', 'hsl(281.9522982828465,80.86355141764689%,34.608759173299944%)', 'hsl(290.112891440352,59.294449927814135%,31.679585648296953%)', 'hsl(250.22151704488948,49.490220019639565%,37.80583399539046%)', 'hsl(223.55915972760315,82.59141924324322%,38.357396897433794%)', 'hsl(142.59969316065371,90.07580812431982%,39.27342937589184%)', 'hsl(235.96945470026037,64.20048673126138%,38.09813967363773%)', 'hsl(263.36404839748747,88.62636359959373%,31.27982859855009%)', 'hsl(94.32506367916183,52.13148271635118%,38.636314297807395%)', 'hsl(332.884188351032,54.720440560457575%,38.078872120382954%)', 'hsl(127.83820929326005,76.02090350397175%,33.72071588212027%)', 'hsl(71.65507503183164,31.15638570844613%,39.66397140504221%)', 'hsl(78.1974720073822,59.68449422353743%,36.848031278225555%)', 'hsl(259.01124695444315,57.05027791250727%,36.96420129525123%)', 'hsl(107.56753943118987,77.84193211765708%,36.95500756268079%)', 'hsl(33.23301223707283,31.906513482830757%,39.58439338268843%)', 'hsl(120.40774290312527,42.93504744851741%,35.49515201436886%)', 'hsl(150.7801302743087,89.24445319594531%,37.32420232647415%)', 'hsl(203.7206941035697,69.30878736479087%,36.292334282328646%)', 'hsl(135.40292252601637,57.24474279537002%,36.10097731263053%)', 'hsl(305.3276082129801,92.59163846983502%,35.521572372672786%)', 'hsl(131.1457113185621,81.71726195157777%,30.427577036691012%)', 'hsl(129.2152623467402,28.388423009304894%,33.87431528458396%)', 'hsl(169.9695623963347,39.84717839510161%,32.55118132093817%)', 'hsl(208.9326048120894,64.71599811375089%,39.34507240137433%)', 'hsl(272.94970338741,61.067695084532126%,37.49730463296055%)', 'hsl(122.29383198316626,94.11849679856904%,38.20494114931994%)', 'hsl(317.84934051963324,41.27523089991924%,35.66210540567425%)', 'hsl(328.5666414608514,87.23788578046668%,31.033457588387506%)', 'hsl(198.49565373946695,79.5895615487529%,36.210653593618744%)', 'hsl(168.20904490274154,54.07452650188474%,36.68066136645684%)', 'hsl(309.6282562123733,87.81325056709792%,38.55400782543883%)', 'hsl(280.11832942495096,41.44630610672641%,35.91800747318397%)', 'hsl(221.08394793724864,68.48873448731419%,38.222142372581324%)', 'hsl(164.1421982877011,40.135957138746505%,36.43846735754583%)', 'hsl(163.82098682651474,81.14239064014443%,36.8170512507084%)', 'hsl(76.01945147318311,86.15267940597221%,32.46073460924835%)', 'hsl(130.0190248118382,74.14453963268508%,32.63846118094978%)', 'hsl(117.29861228222838,71.8439012922396%,32.11106159049727%)', 'hsl(136.93350804046025,44.28511408719086%,38.8251018285632%)', 'hsl(27.764535153454233,63.096377811093625%,37.01787143386947%)', 'hsl(251.9939233938929,93.26428730565962%,30.342926126793678%)', 'hsl(25.481794627440095,32.2725136376949%,36.76305496992909%)', 'hsl(194.6187681025566,79.5554198681141%,33.904047234756106%)', 'hsl(240.59551537758026,69.6851051888419%,33.326133816529044%)', 'hsl(242.57996624176897,44.356589829042335%,33.303261549634364%)', 'hsl(328.1302220906422,86.79800361599365%,36.28885234004957%)'];

class AdminShiftsCombinedRounds extends React.Component {
  constructor(props) {
    super(props);
    this.shiftStartMeridian = this.convertMilitartyTimeToStringWithColon(this.props.shiftData.start);
    this.shiftEndMeridian = this.convertMilitartyTimeToStringWithColon(this.props.shiftData.end);
    this.shiftTimeMeridian = this.shiftStartMeridian + ' - ' + this.shiftEndMeridian;
    this.handleClick = this.handleClick.bind(this);
    this.state = {
      selected: false
    };
  }
  convertMilitartyTimeToStringWithColon(time) {
    let hours = Math.floor(time / 100);
    let amOrPm = '';
    if (hours >= 12) {
      amOrPm = 'PM';
    } else {
      amOrPm = 'AM';
    }
    if (hours > 12) {
      hours = hours % 12;
    }
    time = time.toString();
    let minutes = time[time.length - 2] + time[time.length - 1];
    return hours + ':' + minutes + amOrPm;
  }
  convertRoundTimesToTimeMeridiem(rounds) {
    for (let roundIndex = 0; roundIndex < rounds.length; roundIndex++) {
      let roundStartMeridian = convertMilitaryTime(rounds[roundIndex].start.toString());
      let roundEndMeridian = convertMilitaryTime(rounds[roundIndex].end.toString());
      rounds[roundIndex]['roundTime'] = roundStartMeridian + ' - ' + roundEndMeridian;
    }
    return rounds;
  }
  timeInMinutesFromMidnight(time) {
    let hoursToMinutes = Math.floor(time / 100) * 60;
    let minutesFromTime = time - Math.floor(time / 100) * 100;
    return hoursToMinutes + minutesFromTime;
  }
  handleClick() {
    if (this.props.selecting) {
      if (this.props.userId !== 1) {
        return;
      }
      this.props.onClickAvailableDrivers(parseInt(this.props.shiftData.start), parseInt(this.props.shiftData.end), parseInt(this.props.roundId), parseInt(this.props.userId), this.props.lineBus);
      this.setState({ selected: !this.state.selected });
    }
    this.props.onClickShifts({
      userName: this.props.userName,
      userId: this.props.userId,
      shiftTime: this.shiftTimeMeridian,
      rounds: this.convertRoundTimesToTimeMeridiem(this.props.rounds),
      roundId: this.props.roundId,
      shiftType: this.props.type,
      lineBus: this.props.lineBus
    });
  }
  generateShiftHoverElement() {
    if (this.props.type === 'active') {
      return (
        <AdminShiftsHoverDetailsAndLabels
          userName={this.props.userName}
          userId={this.props.userId}
          shiftTime={this.shiftTimeMeridian}
          rounds={this.props.rounds.length}
          lineBus={this.props.lineBus}
        />
      );
    } else return <div></div>;
  }
  componentDidUpdate(prevProps) {
    if (this.props.selecting !== prevProps.selecting) {
      this.setState({ selected: false });
    } else if (!this.props.selecting && this.props.shiftSelected !== prevProps.shiftSelected) {
      if (this.props.shiftSelected === this.props.roundId) {
        this.setState({ selected: true });
      } else {
        this.setState({ selected: false });
      }
    }
  }
  render() {
    const rangeMax = this.timeInMinutesFromMidnight(this.props.range.max);
    const rangeMin = this.timeInMinutesFromMidnight(this.props.range.min);
    const shiftStart = this.timeInMinutesFromMidnight(this.props.shiftData.start);
    const shiftEnd = this.timeInMinutesFromMidnight(this.props.shiftData.end);
    const rangeDistance = rangeMax - rangeMin;
    const widthPercent = (shiftEnd - shiftStart) / rangeDistance;
    return (
      <div
        onClick={this.handleClick}
        className={`operatorShift rounded border h-75 ${this.props.type} ${this.state.selected ? 'shiftSelected' : ''}`}
        style={{
          width: widthPercent * 1808 + 'px',
          backgroundColor: colors[this.props.userId]
        }}>
        {this.generateShiftHoverElement()}
      </div>
    );
  }
}

export default AdminShiftsCombinedRounds;

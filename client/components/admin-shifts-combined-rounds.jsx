import React from 'react';
import AdminShiftsHoverDetailsAndLabels from './admin-shifts-hover-details-and-labels';
import { convertMilitaryTime } from '../lib/time-functions';
import './admin-shifts-display.css';
import { faRubleSign } from '@fortawesome/free-solid-svg-icons';

const colors = ['hsl(219.43712750098885,81.81314632376741%,34.901319924629504%)', 'hsl(332.09227511794796,56.24353275720762%,37.07781418179177%)', 'hsl(325.7668720529589,83.93000005304907%,30.555454692009317%)', 'hsl(337.7494877573835,28.40554344548254%,35.752962088187296%)', 'hsl(117.29108287744961,65.66065389681322%,36.25629432492864%)', 'hsl(275.94312981735277,42.53416427792623%,32.01068604398667%)', 'hsl(68.08166517131986,74.72308010507925%,30.430757632298203%)', 'hsl(64.46512839350771,38.91494804941109%,37.65895244765175%)', 'hsl(113.03685176593135,28.612390708060957%,38.18362583907123%)', 'hsl(179.12481502352944,26.441710612646226%,38.2991452552384%)', 'hsl(142.89150698359032,53.59574738961703%,34.712509225208734%)', 'hsl(203.57956788363146,83.78732817556723%,33.38109377718438%)', 'hsl(114.06156057822592,54.60645206220569%,35.76423022596263%)', 'hsl(123.39170771935666,30.295104087029152%,39.70156988028879%)', 'hsl(190.98511833847988,94.77557464102571%,36.11137643068264%)', 'hsl(328.06905151675136,46.24548912513824%,32.96309465134676%)', 'hsl(58.828836900740626,36.15251989069207%,35.42669015904153%)', 'hsl(220.91153741078773,47.33837261124638%,38.58142508545238%)', 'hsl(328.40472994391376,51.407457781012%,30.45096590583767%)', 'hsl(276.2211722851016,45.83760559724958%,33.041474550750536%)', 'hsl(145.56713427160162,57.07193252420013%,37.21937728009918%)', 'hsl(199.4088457726114,78.11747052821326%,34.651263014909965%)', 'hsl(88.44819764666923,35.7749666024766%,30.041403977579662%)', 'hsl(206.11525101683407,65.01157251195893%,39.66379275997857%)', 'hsl(229.4185822861336,70.1854784300988%,38.036686139545566%)', 'hsl(208.06146111155505,94.25992742231433%,36.04372969109578%)', 'hsl(103.91846919533154,63.448303435751924%,31.049489648304146%)', 'hsl(169.32804453042502,73.72502839237978%,38.17989592440597%)', 'hsl(253.23232243587228,36.022434272714335%,30.601562952181034%)', 'hsl(307.5175407616808,52.69002408766049%,33.26838473666982%)', 'hsl(248.0606773426439,88.62947773490495%,35.194320392840524%)', 'hsl(272.75801794161026,36.48145781540809%,38.104934851390865%)', 'hsl(101.23860130145749,32.971152046950536%,36.43828103690036%)', 'hsl(217.99186847350143,90.35796179143051%,39.383021050499096%)', 'hsl(271.98336483090156,47.14773978443077%,32.049541061240035%)', 'hsl(127.18447172673106,59.59481764463889%,34.228820013375675%)', 'hsl(173.0178610260562,88.66451542991723%,39.83027040920588%)', 'hsl(269.9620493864404,74.25646409210776%,39.96838156715729%)', 'hsl(334.21569008859996,89.28427282535368%,39.55085146001549%)', 'hsl(76.71730507851352,73.27287827324643%,31.10967484986321%)', 'hsl(84.89070437515905,29.21790406331023%,32.81963986139083%)', 'hsl(105.30655806590802,65.16737389704828%,33.72884629880673%)', 'hsl(135.50855551213692,37.149695803584706%,34.76374282921347%)', 'hsl(96.87663335613641,37.0898168184298%,31.03880777839099%)', 'hsl(86.05397903278777,49.94655443328604%,39.80708569243774%)', 'hsl(240.28747187156185,84.37797386552512%,34.1973544176827%)', 'hsl(85.43954802761044,72.75442120770208%,39.56517490186973%)', 'hsl(273.10016269676333,87.26199601443989%,30.638624686319204%)', 'hsl(308.2224128526909,76.89668434040487%,34.09540678807587%)', 'hsl(236.23459083441549,91.34550416155218%,33.192803894499704%)', 'hsl(66.05206086769584,61.99489585135468%,38.991330188254565%)', 'hsl(248.50827142695533,89.4281237661234%,31.010318237791243%)', 'hsl(143.29346434612944,71.81074159694995%,38.04438377041751%)', 'hsl(219.11250423690169,55.35888257149274%,37.90249727670917%)', 'hsl(231.80385779200694,27.003988017134652%,32.32884599228971%)', 'hsl(116.27585853685031,51.06036255239809%,32.73863570686018%)', 'hsl(179.33402797806937,78.83082936750753%,35.17699026709963%)', 'hsl(291.0618493941723,58.1182827117332%,36.673377784975365%)', 'hsl(183.92858481254822,29.92946703195605%,30.390958107291514%)', 'hsl(107.12171650469136,27.30173982737083%,37.21797765585366%)', 'hsl(115.33340992944623,59.00307288553785%,31.93094903880357%)', 'hsl(153.22933972019086,34.2013812966442%,34.385840942882304%)', 'hsl(112.75232268971806,42.67346048965301%,32.847481067914636%)', 'hsl(104.41728756256462,63.87755840702022%,39.13672249651384%)', 'hsl(231.95354054143442,53.79889116237803%,39.9512186229651%)', 'hsl(289.82106175421575,60.21679172794266%,39.834318721578995%)', 'hsl(181.79517238296125,32.11170803359241%,37.14990478642687%)', 'hsl(202.82138344728344,47.11905080493122%,30.873014630541462%)', 'hsl(267.399813228108,32.53817066040704%,32.77641759916132%)', 'hsl(153.94308426714943,76.19365047393322%,33.72341960510286%)', 'hsl(66.83073948255432,32.05940959275898%,37.493582558222556%)', 'hsl(311.5491573236248,49.49272515498052%,38.52020906950428%)', 'hsl(216.54898747592694,36.536548986011006%,31.74548337982638%)', 'hsl(262.01801239377005,90.10100164928211%,36.14543531291678%)', 'hsl(208.0071534163121,44.13767372640319%,37.64068013580542%)', 'hsl(97.12779633632205,79.79923598901196%,37.030853415193505%)', 'hsl(330.3235089289247,52.724417361693874%,32.75622109239023%)', 'hsl(178.6676744758247,69.06090153178751%,39.237215802120424%)', 'hsl(212.13706497048202,37.14039226407411%,30.93921748596612%)', 'hsl(141.31777576828318,37.0181437942341%,33.73672025641909%)', 'hsl(166.32862465788736,53.509625464257226%,34.36999843070361%)', 'hsl(130.58422724511178,59.49860617466239%,31.248339596158626%)', 'hsl(251.78536655331797,43.95700020507084%,33.33481387314937%)', 'hsl(129.03881635711673,26.531803100458202%,37.842246930183855%)', 'hsl(218.53985446984004,64.46913431655494%,31.956433311754832%)', 'hsl(135.92196519427546,43.57168864035562%,35.84883047981894%)', 'hsl(97.95829838365931,89.65973530491647%,32.508614439882045%)', 'hsl(238.49615828768313,69.20090552364167%,31.143452052603443%)', 'hsl(301.40570520694973,32.02678672825939%,31.26262770991549%)', 'hsl(339.88580516869416,89.64129259244517%,31.104317976941903%)', 'hsl(274.35624019877184,27.09789403362435%,32.820641443036756%)', 'hsl(315.5605468744602,63.94303227500568%,32.713263190581145%)', 'hsl(304.1288315112954,87.81021805512407%,37.397144701040716%)', 'hsl(200.0289249296219,38.46019651999646%,31.227435665894085%)', 'hsl(294.9661384995153,40.50403475377578%,30.237063051250427%)', 'hsl(257.14498932348977,39.28419308161915%,34.77814670981179%)', 'hsl(313.09935548998675,71.36841967958914%,30.923962995671793%)', 'hsl(57.15339289716112,72.63843803982215%,36.93270218126785%)', 'hsl(294.8627312040444,47.22579423617171%,32.5198814735264%)', 'hsl(111.36851849545202,36.28254607078414%,31.165095580452608%)'];

class AdminShiftsCombinedRounds extends React.Component {
  constructor(props) {
    super(props);
    this.shiftStartMeridian = this.convertMilitartyTimeToStringWithColon(this.props.shiftData.start);
    this.shiftEndMeridian = this.convertMilitartyTimeToStringWithColon(this.props.shiftData.end);
    this.shiftTimeMeridian = this.shiftStartMeridian + ' - ' + this.shiftEndMeridian;
    this.handleClick = this.handleClick.bind(this);
    this.state = {
      selected: false
    };
  }
  convertMilitartyTimeToStringWithColon(time) {
    let hours = Math.floor(time / 100);
    let amOrPm = '';
    if (hours >= 12) {
      amOrPm = 'PM';
    } else {
      amOrPm = 'AM';
    }
    if (hours > 12) {
      hours = hours % 12;
    }
    time = time.toString();
    let minutes = time[time.length - 2] + time[time.length - 1];
    return hours + ':' + minutes + amOrPm;
  }
  convertRoundTimesToTimeMeridiem(rounds) {
    for (let roundIndex = 0; roundIndex < rounds.length; roundIndex++) {
      let roundStartMeridian = convertMilitaryTime(rounds[roundIndex].start.toString());
      let roundEndMeridian = convertMilitaryTime(rounds[roundIndex].end.toString());
      rounds[roundIndex]['roundTime'] = roundStartMeridian + ' - ' + roundEndMeridian;
    }
    return rounds;
  }
  timeInMinutesFromMidnight(time) {
    let hoursToMinutes = Math.floor(time / 100) * 60;
    let minutesFromTime = time - Math.floor(time / 100) * 100;
    return hoursToMinutes + minutesFromTime;
  }
  handleClick() {
    if (this.props.selecting) {
      this.props.onClickAvailableDrivers(parseInt(this.props.shiftData.start), parseInt(this.props.shiftData.end), parseInt(this.props.roundId), parseInt(this.props.userId));
      this.setState({ selected: !this.state.selected });
    }
    console.log('shift click: ', this.state.selected, this.props.shiftData, parseInt(this.props.roundId), this.props.userId);
    this.props.onClickShifts({
      userName: this.props.userName,
      userId: this.props.userId,
      shiftTime: this.shiftTimeMeridian,
      rounds: this.convertRoundTimesToTimeMeridiem(this.props.rounds),
      roundId: this.props.roundId,
      shiftType: this.props.type,
      lineBus: this.props.lineBus
    });
  }
  generateShiftHoverElement() {
    if (this.props.type === 'active') {
      return (
        <AdminShiftsHoverDetailsAndLabels
          userName={this.props.userName}
          userId={this.props.userId}
          shiftTime={this.shiftTimeMeridian}
          rounds={this.props.rounds.length}
        />
      );
    } else return <div></div>;
  }
  componentDidUpdate(prevProps) {
    if (this.props.selecting !== prevProps.selecting) {
      this.setState({ selected: false });
    } else if (!this.props.selecting && this.props.shiftSelected !== prevProps.shiftSelected) {
      console.log(this.props.shiftSelected, this.props.roundId);
      if (this.props.shiftSelected === this.props.roundId) {
        this.setState({ selected: true });
      } else {
        this.setState({ selected: false });
      }
    }
  }
  render() {
    const rangeMax = this.timeInMinutesFromMidnight(this.props.range.max);
    const rangeMin = this.timeInMinutesFromMidnight(this.props.range.min);
    const shiftStart = this.timeInMinutesFromMidnight(this.props.shiftData.start);
    const shiftEnd = this.timeInMinutesFromMidnight(this.props.shiftData.end);
    const rangeDistance = rangeMax - rangeMin;
    const widthPercent = (shiftEnd - shiftStart) / rangeDistance;
    return (
      <div
        onClick={this.handleClick}
        className={`operatorShift rounded border h-75 ${this.props.type} ${this.state.selected ? 'shiftSelected' : ''}`}
        style={{
          width: widthPercent * 1808 + 'px',
          backgroundColor: colors[this.props.userId]
        }}>
        {this.generateShiftHoverElement()}
      </div>
    );
  }
}

export default AdminShiftsCombinedRounds;
